// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: cache.capnp

#include "cache.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<48> b_b7762f9c292a9022 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     34, 144,  42,  41, 156,  47, 118, 183,
     12,   0,   0,   0,   1,   0,   1,   0,
     30, 128, 177, 225, 248, 207,  97, 190,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     22,   0,   0,   0, 153,   1,   0,   0,
     21,   0,   0,   0, 146,   0,   0,   0,
     29,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97,  99, 104, 101,  46,  99,  97,
    112, 110, 112,  58,  69, 110, 116, 114,
    121,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
     13,  59,  17,  38,   3,  50, 158, 165,
      9,   0,   0,   0,  42,   0,   0,   0,
      7,  76, 161,  38, 134,  52, 221, 194,
      5,   0,   0,   0,  82,   0,   0,   0,
     70, 105, 108, 101,   0,   0,   0,   0,
     68, 105, 114, 101,  99, 116, 111, 114,
    121,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    120, 209, 119,  73,  90,  39,  80, 181,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 116, 104,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b7762f9c292a9022 = b_b7762f9c292a9022.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b7762f9c292a9022[] = {
  &s_b550275a4977d178,
};
static const uint16_t m_b7762f9c292a9022[] = {0, 1};
static const uint16_t i_b7762f9c292a9022[] = {0, 1};
const ::capnp::_::RawSchema s_b7762f9c292a9022 = {
  0xb7762f9c292a9022, b_b7762f9c292a9022.words, 48, d_b7762f9c292a9022, m_b7762f9c292a9022,
  1, 2, i_b7762f9c292a9022, nullptr, nullptr, { &s_b7762f9c292a9022, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<56> b_a59e320326113b0d = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     13,  59,  17,  38,   3,  50, 158, 165,
     18,   0,   0,   0,   1,   0,   1,   0,
     34, 144,  42,  41, 156,  47, 118, 183,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    167,   0,   0,   0,  55,   1,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97,  99, 104, 101,  46,  99,  97,
    112, 110, 112,  58,  69, 110, 116, 114,
    121,  46,  70, 105, 108, 101,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     75, 133, 225,  75,  75, 130, 167, 223,
      1,   0,   0,   0,  42,   0,   0,   0,
     80,  97, 105, 114,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116, 101, 110, 116,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     75, 133, 225,  75,  75, 130, 167, 223,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 111, 100, 105, 102, 105, 101, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a59e320326113b0d = b_a59e320326113b0d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a59e320326113b0d[] = {
  &s_dfa7824b4be1854b,
};
static const uint16_t m_a59e320326113b0d[] = {0, 1};
static const uint16_t i_a59e320326113b0d[] = {0, 1};
const ::capnp::_::RawSchema s_a59e320326113b0d = {
  0xa59e320326113b0d, b_a59e320326113b0d.words, 56, d_a59e320326113b0d, m_a59e320326113b0d,
  1, 2, i_a59e320326113b0d, nullptr, nullptr, { &s_a59e320326113b0d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<64> b_dfa7824b4be1854b = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
     75, 133, 225,  75,  75, 130, 167, 223,
     23,   0,   0,   0,   1,   0,   0,   0,
     13,  59,  17,  38,   3,  50, 158, 165,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    234,   0,   0,   0,  52,   1,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97,  99, 104, 101,  46,  99,  97,
    112, 110, 112,  58,  69, 110, 116, 114,
    121,  46,  70, 105, 108, 101,  46,  80,
     97, 105, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 108, 105, 115, 116,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dfa7824b4be1854b = b_dfa7824b4be1854b.words;
#if !CAPNP_LITE
static const uint16_t m_dfa7824b4be1854b[] = {0, 2, 1};
static const uint16_t i_dfa7824b4be1854b[] = {0, 1, 2};
const ::capnp::_::RawSchema s_dfa7824b4be1854b = {
  0xdfa7824b4be1854b, b_dfa7824b4be1854b.words, 64, nullptr, m_dfa7824b4be1854b,
  0, 3, i_dfa7824b4be1854b, nullptr, nullptr, { &s_dfa7824b4be1854b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_c2dd348626a14c07 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
      7,  76, 161,  38, 134,  52, 221, 194,
     18,   0,   0,   0,   1,   0,   1,   0,
     34, 144,  42,  41, 156,  47, 118, 183,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     58,   1,   0,   0, 151,   1,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97,  99, 104, 101,  46,  99,  97,
    112, 110, 112,  58,  69, 110, 116, 114,
    121,  46,  68, 105, 114, 101,  99, 116,
    111, 114, 121,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88,   0,   0,   0,   3,   0,   1,   0,
    100,   0,   0,   0,   2,   0,   1,   0,
    105, 116, 101, 109, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 108, 111,  98,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 118, 101, 110, 116,  73, 100,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c2dd348626a14c07 = b_c2dd348626a14c07.words;
#if !CAPNP_LITE
static const uint16_t m_c2dd348626a14c07[] = {2, 1, 0};
static const uint16_t i_c2dd348626a14c07[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c2dd348626a14c07 = {
  0xc2dd348626a14c07, b_c2dd348626a14c07.words, 68, nullptr, m_c2dd348626a14c07,
  0, 3, i_c2dd348626a14c07, nullptr, nullptr, { &s_c2dd348626a14c07, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<78> b_b550275a4977d178 = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    120, 209, 119,  73,  90,  39,  80, 181,
     18,   0,   0,   0,   1,   0,   1,   0,
     34, 144,  42,  41, 156,  47, 118, 183,
      2,   0,   7,   0,   1,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97,  99, 104, 101,  46,  99,  97,
    112, 110, 112,  58,  69, 110, 116, 114,
    121,  46, 116, 121, 112, 101,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
    102, 105, 108, 101,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     13,  59,  17,  38,   3,  50, 158, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 114, 101,  99, 116, 111, 114,
    121,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      7,  76, 161,  38, 134,  52, 221, 194,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 105, 110, 107,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 105, 115, 115, 105, 110, 103,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b550275a4977d178 = b_b550275a4977d178.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b550275a4977d178[] = {
  &s_a59e320326113b0d,
  &s_b7762f9c292a9022,
  &s_c2dd348626a14c07,
};
static const uint16_t m_b550275a4977d178[] = {1, 0, 2, 3};
static const uint16_t i_b550275a4977d178[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_b550275a4977d178 = {
  0xb550275a4977d178, b_b550275a4977d178.words, 78, d_b550275a4977d178, m_b550275a4977d178,
  3, 4, i_b550275a4977d178, nullptr, nullptr, { &s_b550275a4977d178, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_8d7f9750cce7f7fd = {
  {   0,   0,   0,   0,   6,   0,   6,   0,
    253, 247, 231, 204,  80, 151, 127, 141,
     12,   0,   0,   0,   1,   0,   1,   0,
     30, 128, 177, 225, 248, 207,  97, 190,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    155,   1,   0,   0, 222,   1,   0,   0,
     21,   0,   0,   0, 146,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97,  99, 104, 101,  46,  99,  97,
    112, 110, 112,  58,  67,  97,  99, 104,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     56,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
    101, 110, 116, 114, 105, 101, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     34, 144,  42,  41, 156,  47, 118, 183,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 101, 114, 115, 105, 111, 110,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8d7f9750cce7f7fd = b_8d7f9750cce7f7fd.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8d7f9750cce7f7fd[] = {
  &s_b7762f9c292a9022,
};
static const uint16_t m_8d7f9750cce7f7fd[] = {0, 1};
static const uint16_t i_8d7f9750cce7f7fd[] = {0, 1};
const ::capnp::_::RawSchema s_8d7f9750cce7f7fd = {
  0x8d7f9750cce7f7fd, b_8d7f9750cce7f7fd.words, 52, d_8d7f9750cce7f7fd, m_8d7f9750cce7f7fd,
  1, 2, i_8d7f9750cce7f7fd, nullptr, nullptr, { &s_8d7f9750cce7f7fd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// Entry
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Entry::_capnpPrivate::dataWordSize;
constexpr uint16_t Entry::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Entry::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Entry::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Entry::File
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Entry::File::_capnpPrivate::dataWordSize;
constexpr uint16_t Entry::File::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Entry::File::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Entry::File::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Entry::File::Pair
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Entry::File::Pair::_capnpPrivate::dataWordSize;
constexpr uint16_t Entry::File::Pair::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Entry::File::Pair::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Entry::File::Pair::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Entry::Directory
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Entry::Directory::_capnpPrivate::dataWordSize;
constexpr uint16_t Entry::Directory::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Entry::Directory::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Entry::Directory::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Entry::Type
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Entry::Type::_capnpPrivate::dataWordSize;
constexpr uint16_t Entry::Type::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Entry::Type::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Entry::Type::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cache
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cache::_capnpPrivate::dataWordSize;
constexpr uint16_t Cache::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cache::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cache::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



